// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.19.1
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "product";

/** Product message definition */
export interface Product {
  id: string;
  name: string;
  price: number;
  description: string;
}

/** Request messages */
export interface CreateProductRequest {
  name: string;
  price: number;
  description: string;
}

export interface ProductIdRequest {
  id: string;
}

export interface Empty {
}

/** Define BlStack as a message */
export interface BlStack {
  method: string;
  message: string;
}

/** Standardized bl-response format */
export interface CreateProductResponse {
  success: boolean;
  serviceName: string;
  layer: string;
  code: string;
  blStack: BlStack | undefined;
  data: Product | undefined;
}

export interface GetAllProductsResponse {
  success: boolean;
  serviceName: string;
  layer: string;
  code: string;
  blStack: BlStack | undefined;
  data: Product[];
}

export interface GetProductByIdResponse {
  success: boolean;
  serviceName: string;
  layer: string;
  code: string;
  blStack: BlStack | undefined;
  data: Product | undefined;
}

function createBaseProduct(): Product {
  return { id: "", name: "", price: 0, description: "" };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.price !== 0) {
      writer.uint32(25).double(message.price);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.price = reader.double();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Product>): Product {
    return Product.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Product>): Product {
    const message = createBaseProduct();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.price = object.price ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCreateProductRequest(): CreateProductRequest {
  return { name: "", price: 0, description: "" };
}

export const CreateProductRequest: MessageFns<CreateProductRequest> = {
  encode(message: CreateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.price !== 0) {
      writer.uint32(17).double(message.price);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.price = reader.double();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateProductRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProductRequest>): CreateProductRequest {
    return CreateProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProductRequest>): CreateProductRequest {
    const message = createBaseCreateProductRequest();
    message.name = object.name ?? "";
    message.price = object.price ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseProductIdRequest(): ProductIdRequest {
  return { id: "" };
}

export const ProductIdRequest: MessageFns<ProductIdRequest> = {
  encode(message: ProductIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ProductIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductIdRequest>): ProductIdRequest {
    return ProductIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductIdRequest>): ProductIdRequest {
    const message = createBaseProductIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Empty>): Empty {
    return Empty.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Empty>): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseBlStack(): BlStack {
  return { method: "", message: "" };
}

export const BlStack: MessageFns<BlStack> = {
  encode(message: BlStack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlStack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlStack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlStack {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: BlStack): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<BlStack>): BlStack {
    return BlStack.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BlStack>): BlStack {
    const message = createBaseBlStack();
    message.method = object.method ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCreateProductResponse(): CreateProductResponse {
  return { success: false, serviceName: "", layer: "", code: "", blStack: undefined, data: undefined };
}

export const CreateProductResponse: MessageFns<CreateProductResponse> = {
  encode(message: CreateProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.serviceName !== "") {
      writer.uint32(18).string(message.serviceName);
    }
    if (message.layer !== "") {
      writer.uint32(26).string(message.layer);
    }
    if (message.code !== "") {
      writer.uint32(34).string(message.code);
    }
    if (message.blStack !== undefined) {
      BlStack.encode(message.blStack, writer.uint32(42).fork()).join();
    }
    if (message.data !== undefined) {
      Product.encode(message.data, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.layer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.code = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.blStack = BlStack.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.data = Product.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      layer: isSet(object.layer) ? globalThis.String(object.layer) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      blStack: isSet(object.blStack) ? BlStack.fromJSON(object.blStack) : undefined,
      data: isSet(object.data) ? Product.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: CreateProductResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.layer !== "") {
      obj.layer = message.layer;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.blStack !== undefined) {
      obj.blStack = BlStack.toJSON(message.blStack);
    }
    if (message.data !== undefined) {
      obj.data = Product.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProductResponse>): CreateProductResponse {
    return CreateProductResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProductResponse>): CreateProductResponse {
    const message = createBaseCreateProductResponse();
    message.success = object.success ?? false;
    message.serviceName = object.serviceName ?? "";
    message.layer = object.layer ?? "";
    message.code = object.code ?? "";
    message.blStack = (object.blStack !== undefined && object.blStack !== null)
      ? BlStack.fromPartial(object.blStack)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null) ? Product.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseGetAllProductsResponse(): GetAllProductsResponse {
  return { success: false, serviceName: "", layer: "", code: "", blStack: undefined, data: [] };
}

export const GetAllProductsResponse: MessageFns<GetAllProductsResponse> = {
  encode(message: GetAllProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.serviceName !== "") {
      writer.uint32(18).string(message.serviceName);
    }
    if (message.layer !== "") {
      writer.uint32(26).string(message.layer);
    }
    if (message.code !== "") {
      writer.uint32(34).string(message.code);
    }
    if (message.blStack !== undefined) {
      BlStack.encode(message.blStack, writer.uint32(42).fork()).join();
    }
    for (const v of message.data) {
      Product.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.layer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.code = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.blStack = BlStack.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.data.push(Product.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllProductsResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      layer: isSet(object.layer) ? globalThis.String(object.layer) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      blStack: isSet(object.blStack) ? BlStack.fromJSON(object.blStack) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetAllProductsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.layer !== "") {
      obj.layer = message.layer;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.blStack !== undefined) {
      obj.blStack = BlStack.toJSON(message.blStack);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Product.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetAllProductsResponse>): GetAllProductsResponse {
    return GetAllProductsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAllProductsResponse>): GetAllProductsResponse {
    const message = createBaseGetAllProductsResponse();
    message.success = object.success ?? false;
    message.serviceName = object.serviceName ?? "";
    message.layer = object.layer ?? "";
    message.code = object.code ?? "";
    message.blStack = (object.blStack !== undefined && object.blStack !== null)
      ? BlStack.fromPartial(object.blStack)
      : undefined;
    message.data = object.data?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProductByIdResponse(): GetProductByIdResponse {
  return { success: false, serviceName: "", layer: "", code: "", blStack: undefined, data: undefined };
}

export const GetProductByIdResponse: MessageFns<GetProductByIdResponse> = {
  encode(message: GetProductByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.serviceName !== "") {
      writer.uint32(18).string(message.serviceName);
    }
    if (message.layer !== "") {
      writer.uint32(26).string(message.layer);
    }
    if (message.code !== "") {
      writer.uint32(34).string(message.code);
    }
    if (message.blStack !== undefined) {
      BlStack.encode(message.blStack, writer.uint32(42).fork()).join();
    }
    if (message.data !== undefined) {
      Product.encode(message.data, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.layer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.code = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.blStack = BlStack.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.data = Product.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductByIdResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      layer: isSet(object.layer) ? globalThis.String(object.layer) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      blStack: isSet(object.blStack) ? BlStack.fromJSON(object.blStack) : undefined,
      data: isSet(object.data) ? Product.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetProductByIdResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.layer !== "") {
      obj.layer = message.layer;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.blStack !== undefined) {
      obj.blStack = BlStack.toJSON(message.blStack);
    }
    if (message.data !== undefined) {
      obj.data = Product.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<GetProductByIdResponse>): GetProductByIdResponse {
    return GetProductByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProductByIdResponse>): GetProductByIdResponse {
    const message = createBaseGetProductByIdResponse();
    message.success = object.success ?? false;
    message.serviceName = object.serviceName ?? "";
    message.layer = object.layer ?? "";
    message.code = object.code ?? "";
    message.blStack = (object.blStack !== undefined && object.blStack !== null)
      ? BlStack.fromPartial(object.blStack)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null) ? Product.fromPartial(object.data) : undefined;
    return message;
  },
};

/** Define the ProductService service */
export type ProductServiceDefinition = typeof ProductServiceDefinition;
export const ProductServiceDefinition = {
  name: "ProductService",
  fullName: "product.ProductService",
  methods: {
    createProduct: {
      name: "CreateProduct",
      requestType: CreateProductRequest,
      requestStream: false,
      responseType: CreateProductResponse,
      responseStream: false,
      options: {},
    },
    getProductById: {
      name: "GetProductById",
      requestType: ProductIdRequest,
      requestStream: false,
      responseType: GetProductByIdResponse,
      responseStream: false,
      options: {},
    },
    getAllProducts: {
      name: "GetAllProducts",
      requestType: Empty,
      requestStream: false,
      responseType: GetAllProductsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ProductServiceImplementation<CallContextExt = {}> {
  createProduct(
    request: CreateProductRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateProductResponse>>;
  getProductById(
    request: ProductIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProductByIdResponse>>;
  getAllProducts(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<GetAllProductsResponse>>;
}

export interface ProductServiceClient<CallOptionsExt = {}> {
  createProduct(
    request: DeepPartial<CreateProductRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateProductResponse>;
  getProductById(
    request: DeepPartial<ProductIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProductByIdResponse>;
  getAllProducts(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<GetAllProductsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
